# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _Mesh
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class PySwigIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _Mesh.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _Mesh.PySwigIterator_value(*args)
    def incr(*args): return _Mesh.PySwigIterator_incr(*args)
    def decr(*args): return _Mesh.PySwigIterator_decr(*args)
    def distance(*args): return _Mesh.PySwigIterator_distance(*args)
    def equal(*args): return _Mesh.PySwigIterator_equal(*args)
    def copy(*args): return _Mesh.PySwigIterator_copy(*args)
    def next(*args): return _Mesh.PySwigIterator_next(*args)
    def previous(*args): return _Mesh.PySwigIterator_previous(*args)
    def advance(*args): return _Mesh.PySwigIterator_advance(*args)
    def __eq__(*args): return _Mesh.PySwigIterator___eq__(*args)
    def __ne__(*args): return _Mesh.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _Mesh.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _Mesh.PySwigIterator___isub__(*args)
    def __add__(*args): return _Mesh.PySwigIterator___add__(*args)
    def __sub__(*args): return _Mesh.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _Mesh.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class DVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _Mesh.DVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Mesh.DVector___nonzero__(*args)
    def __len__(*args): return _Mesh.DVector___len__(*args)
    def pop(*args): return _Mesh.DVector_pop(*args)
    def __getslice__(*args): return _Mesh.DVector___getslice__(*args)
    def __setslice__(*args): return _Mesh.DVector___setslice__(*args)
    def __delslice__(*args): return _Mesh.DVector___delslice__(*args)
    def __delitem__(*args): return _Mesh.DVector___delitem__(*args)
    def __getitem__(*args): return _Mesh.DVector___getitem__(*args)
    def __setitem__(*args): return _Mesh.DVector___setitem__(*args)
    def append(*args): return _Mesh.DVector_append(*args)
    def empty(*args): return _Mesh.DVector_empty(*args)
    def size(*args): return _Mesh.DVector_size(*args)
    def clear(*args): return _Mesh.DVector_clear(*args)
    def swap(*args): return _Mesh.DVector_swap(*args)
    def get_allocator(*args): return _Mesh.DVector_get_allocator(*args)
    def begin(*args): return _Mesh.DVector_begin(*args)
    def end(*args): return _Mesh.DVector_end(*args)
    def rbegin(*args): return _Mesh.DVector_rbegin(*args)
    def rend(*args): return _Mesh.DVector_rend(*args)
    def pop_back(*args): return _Mesh.DVector_pop_back(*args)
    def erase(*args): return _Mesh.DVector_erase(*args)
    def __init__(self, *args): 
        this = _Mesh.new_DVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Mesh.DVector_push_back(*args)
    def front(*args): return _Mesh.DVector_front(*args)
    def back(*args): return _Mesh.DVector_back(*args)
    def assign(*args): return _Mesh.DVector_assign(*args)
    def resize(*args): return _Mesh.DVector_resize(*args)
    def insert(*args): return _Mesh.DVector_insert(*args)
    def reserve(*args): return _Mesh.DVector_reserve(*args)
    def capacity(*args): return _Mesh.DVector_capacity(*args)
    __swig_destroy__ = _Mesh.delete_DVector
    __del__ = lambda self : None;
DVector_swigregister = _Mesh.DVector_swigregister
DVector_swigregister(DVector)

class ULongVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _Mesh.ULongVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _Mesh.ULongVector___nonzero__(*args)
    def __len__(*args): return _Mesh.ULongVector___len__(*args)
    def pop(*args): return _Mesh.ULongVector_pop(*args)
    def __getslice__(*args): return _Mesh.ULongVector___getslice__(*args)
    def __setslice__(*args): return _Mesh.ULongVector___setslice__(*args)
    def __delslice__(*args): return _Mesh.ULongVector___delslice__(*args)
    def __delitem__(*args): return _Mesh.ULongVector___delitem__(*args)
    def __getitem__(*args): return _Mesh.ULongVector___getitem__(*args)
    def __setitem__(*args): return _Mesh.ULongVector___setitem__(*args)
    def append(*args): return _Mesh.ULongVector_append(*args)
    def empty(*args): return _Mesh.ULongVector_empty(*args)
    def size(*args): return _Mesh.ULongVector_size(*args)
    def clear(*args): return _Mesh.ULongVector_clear(*args)
    def swap(*args): return _Mesh.ULongVector_swap(*args)
    def get_allocator(*args): return _Mesh.ULongVector_get_allocator(*args)
    def begin(*args): return _Mesh.ULongVector_begin(*args)
    def end(*args): return _Mesh.ULongVector_end(*args)
    def rbegin(*args): return _Mesh.ULongVector_rbegin(*args)
    def rend(*args): return _Mesh.ULongVector_rend(*args)
    def pop_back(*args): return _Mesh.ULongVector_pop_back(*args)
    def erase(*args): return _Mesh.ULongVector_erase(*args)
    def __init__(self, *args): 
        this = _Mesh.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _Mesh.ULongVector_push_back(*args)
    def front(*args): return _Mesh.ULongVector_front(*args)
    def back(*args): return _Mesh.ULongVector_back(*args)
    def assign(*args): return _Mesh.ULongVector_assign(*args)
    def resize(*args): return _Mesh.ULongVector_resize(*args)
    def insert(*args): return _Mesh.ULongVector_insert(*args)
    def reserve(*args): return _Mesh.ULongVector_reserve(*args)
    def capacity(*args): return _Mesh.ULongVector_capacity(*args)
    __swig_destroy__ = _Mesh.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _Mesh.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class Mesh(object):
    """Proxy of C++ Mesh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double length, double area, unsigned int num_zones) -> Mesh
        __init__(self, DVector zone_lengths, double area=1.0) -> Mesh
        __init__(self, DVector zone_lengths) -> Mesh
        """
        this = _Mesh.new_Mesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mesh.delete_Mesh
    __del__ = lambda self : None;
    def length(*args):
        """length(self) -> double"""
        return _Mesh.Mesh_length(*args)

    def numZones(*args):
        """numZones(self) -> unsigned int"""
        return _Mesh.Mesh_numZones(*args)

    def numNodes(*args):
        """numNodes(self) -> unsigned int"""
        return _Mesh.Mesh_numNodes(*args)

    def numCorners(*args):
        """numCorners(self) -> unsigned int"""
        return _Mesh.Mesh_numCorners(*args)

Mesh_swigregister = _Mesh.Mesh_swigregister
Mesh_swigregister(Mesh)



